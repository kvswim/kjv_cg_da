GOTERM
k = GOTerms("BP")
goterms[grep("androgen", goterms)]
goterms = unlist(Term(GOTERM))
goterms[grep("androgen", goterms)]
GOTERM$"GO:0050681"
GOTERM$"GO:0035935"
goterms[grep("estrogen", goterms)]
GOTERM$"GO:0006702"
goterms[grep("thyroid", goterms)]
GOTERM$"GO:0006590"
grep("synthesis",goterms[grep("insulin", goterms)])
grep("synthesis",goterms[grep("androgen", goterms)])
grep("synthesis",goterms[grep("secretion", goterms)])
grep("secretion",goterms[grep("androgen", goterms)])
grep("secretion",goterms[grep("estrogen", goterms)])
grep("secretion",goterms[grep("thyroid", goterms)])
grep("generation",goterms[grep("thyroid", goterms)])
goterms[grep("thyroid", goterms)][grep("generation",goterms[grep("thyroid", goterms)])]
GOTERM$"GO:0006590"
goterms[grep("thyroid", goterms)][grep("secretion",goterms[grep("thyroid", goterms)])]
goterms[grep("hormone", goterms)]
goterms[grep("hormone", goterms)]
goterms[grep("hormone", goterms)]
goterms[grep("insulin", goterms)]
GOTERM$"GO:0005009"
setwd("~/Documents/TA/homework1/piazza_post_hw_1/exercise7/")
# genotype<-read.csv("genotype.csv",row.names = 1)
#
# # impute with mode
# for(i in 1:ncol(genotype)){
#   if(length(which(genotype[,i]==3)) > 0){
#     zeros <- length(which(genotype[,i] == 0 ))
#     ones <- length(which(genotype[,i] == 1 ))
#     twos <- length(which(genotype[,i] == 2 ))
#     maxone <- max(cbind(zeros, ones, twos))
#     imputewith <- which(cbind(zeros, ones, twos) == maxone)[1]-1
#     genotype[which(genotype[,i]==3),i] <- imputewith
#   }
# }
#read the files required
library(MASS)
library(plyr)
# Added required files to directory
genotype <- read.csv("genotype.csv")
phenotype <- read.csv("phenotype.csv")
names(phenotype) <- c("X","Phenotype")
MAF <- function(x)
{
y <- x[!x %in% "3"]
m <- sum(y)/(2*nrow(x))
}
n <- 1 - m
s
#apply the function "MAF" to each SNP
s <- min(m,n)
p <- adply(genotype[-1],2,MAF)
length(which(p$V1>0.03))
length(which(p$V1>0.1))
length(which(p$V1>0.05))
MAF <- function(x)
{
y <- x[!x %in% "3"]
m <- sum(y)/(2*nrow(x))
n <- 1 - m
s <- min(m,n)
s
}
#apply the function "MAF" to each SNP
p <- adply(genotype[-1],2,MAF)
length(which(p$V1>0.03))
length(which(p$V1>0.05))
length(which(p$V1>0.1))
setwd("~/Documents/TA/homework1/piazza_post_hw_1/exercise7/")
# genotype<-read.csv("genotype.csv",row.names = 1)
#
# # impute with mode
# for(i in 1:ncol(genotype)){
#   if(length(which(genotype[,i]==3)) > 0){
#     zeros <- length(which(genotype[,i] == 0 ))
#     ones <- length(which(genotype[,i] == 1 ))
#     twos <- length(which(genotype[,i] == 2 ))
#     maxone <- max(cbind(zeros, ones, twos))
#     imputewith <- which(cbind(zeros, ones, twos) == maxone)[1]-1
#     genotype[which(genotype[,i]==3),i] <- imputewith
#   }
# }
#read the files required
library(MASS)
library(plyr)
# Added required files to directory
genotype <- read.csv("genotype.csv")
phenotype <- read.csv("phenotype.csv")
names(phenotype) <- c("X","Phenotype")
#function to find minor allele frequency (MAF)
MAF <- function(x)
{
y <- x[!x %in% "3"]
c2 = length(which(y == 2))
c1 = length(which(y == 1))
c0 = length(which(y == 0))
f0 = ((2*c0)+c1)/(2*length(x))
f2 = ((2*c2)+c1)/(2*length(x))
# m <- sum(y)/(2*nrow(x))
# n <- 1 - m
# s <- min(m,n)
s <- min(f0,f2)
s
}
#apply the function "MAF" to each SNP
p <- adply(genotype[-1],2,MAF)
length(which(p$V1>0.03))
length(which(p$V1>0.05))
length(which(p$V1>0.1))
(which(y == 2))
x<-genotype[,3]
y <- x[!x %in% "3"]
c2 = length(which(y == 2))
c1 = length(which(y == 1))
c0 = length(which(y == 0))
f0 = ((2*c0)+c1)/(2*length(x))
f2 = ((2*c2)+c1)/(2*length(x))
s <- min(f0,f2)
s
setwd("~/Documents/TA/homework1/piazza_post_hw_1/exercise7/")
# genotype<-read.csv("genotype.csv",row.names = 1)
#
# # impute with mode
# for(i in 1:ncol(genotype)){
#   if(length(which(genotype[,i]==3)) > 0){
#     zeros <- length(which(genotype[,i] == 0 ))
#     ones <- length(which(genotype[,i] == 1 ))
#     twos <- length(which(genotype[,i] == 2 ))
#     maxone <- max(cbind(zeros, ones, twos))
#     imputewith <- which(cbind(zeros, ones, twos) == maxone)[1]-1
#     genotype[which(genotype[,i]==3),i] <- imputewith
#   }
# }
#read the files required
library(MASS)
library(plyr)
# Added required files to directory
genotype <- read.csv("genotype.csv")
phenotype <- read.csv("phenotype.csv")
names(phenotype) <- c("X","Phenotype")
#function to find minor allele frequency (MAF)
MAF <- function(x)
{
y <- x[!x %in% "3"]
c2 = length(which(y == 2))
c1 = length(which(y == 1))
c0 = length(which(y == 0))
f0 = ((2*c0)+c1)/(2*length(x))
f2 = ((2*c2)+c1)/(2*length(x))
# m <- sum(y)/(2*nrow(x))
# n <- 1 - m
# s <- min(m,n)
s <- min(f0,f2)
s
}
#apply the function "MAF" to each SNP
p <- adply(genotype[-1],2,MAF)
setwd("~/Documents/TA/homework1/piazza_post_hw_1/exercise7/")
# genotype<-read.csv("genotype.csv",row.names = 1)
#
# # impute with mode
# for(i in 1:ncol(genotype)){
#   if(length(which(genotype[,i]==3)) > 0){
#     zeros <- length(which(genotype[,i] == 0 ))
#     ones <- length(which(genotype[,i] == 1 ))
#     twos <- length(which(genotype[,i] == 2 ))
#     maxone <- max(cbind(zeros, ones, twos))
#     imputewith <- which(cbind(zeros, ones, twos) == maxone)[1]-1
#     genotype[which(genotype[,i]==3),i] <- imputewith
#   }
# }
#read the files required
library(MASS)
library(plyr)
# Added required files to directory
genotype <- read.csv("genotype.csv")
phenotype <- read.csv("phenotype.csv")
names(phenotype) <- c("X","Phenotype")
#function to find minor allele frequency (MAF)
MAF <- function(x)
{
y <- x[!x %in% "3"]
c2 = length(which(y == 2))
c1 = length(which(y == 1))
c0 = length(which(y == 0))
f0 = ((2*c0)+c1)/(2*nrow(x))
f2 = ((2*c2)+c1)/(2*nrow(x))
# m <- sum(y)/(2*nrow(x))
# n <- 1 - m
# s <- min(m,n)
s <- min(f0,f2)
s
}
#apply the function "MAF" to each SNP
p <- adply(genotype[-1],2,MAF)
length(which(p$V1>0.03))
length(which(p$V1>0.05))
length(which(p$V1>0.1))
f0+f2
setwd("~/Documents/TA/homework1/piazza_post_hw_1/exercise7/")
# genotype<-read.csv("genotype.csv",row.names = 1)
#
# # impute with mode
# for(i in 1:ncol(genotype)){
#   if(length(which(genotype[,i]==3)) > 0){
#     zeros <- length(which(genotype[,i] == 0 ))
#     ones <- length(which(genotype[,i] == 1 ))
#     twos <- length(which(genotype[,i] == 2 ))
#     maxone <- max(cbind(zeros, ones, twos))
#     imputewith <- which(cbind(zeros, ones, twos) == maxone)[1]-1
#     genotype[which(genotype[,i]==3),i] <- imputewith
#   }
# }
#read the files required
library(MASS)
library(plyr)
# Added required files to directory
genotype <- read.csv("genotype.csv")
phenotype <- read.csv("phenotype.csv")
names(phenotype) <- c("X","Phenotype")
#function to find minor allele frequency (MAF)
MAF <- function(x)
{
y <- x[!x %in% "3"]
c2 = length(which(y == 2))
c1 = length(which(y == 1))
c0 = length(which(y == 0))
f0 = ((2*c0)+c1)/(2*nrow(y))
f2 = ((2*c2)+c1)/(2*nrow(y))
# m <- sum(y)/(2*nrow(x))
# n <- 1 - m
# s <- min(m,n)
s <- min(f0,f2)
s
}
#apply the function "MAF" to each SNP
p <- adply(genotype[-1],2,MAF)
length(which(p$V1>0.03))
length(which(p$V1>0.05))
length(which(p$V1>0.1))
c2 = length(which(x == 2))
c1 = length(which(x == 1))
c0 = length(which(x == 0))
f0 = ((2*c0)+c1)/(2*nrow(y))
f0 = ((2*c0)+c1)/(2*nrow(x))
f2 = ((2*c2)+c1)/(2*nrow(x))
c2 = length(which(x == 2))
c1 = length(which(x == 1))
c0 = length(which(x == 0))
(2*c0)+c1)
(2*c0)+c1
2*nrow(x)
x
setwd("~/Documents/TA/homework1/piazza_post_hw_1/exercise7/")
# genotype<-read.csv("genotype.csv",row.names = 1)
#
# # impute with mode
# for(i in 1:ncol(genotype)){
#   if(length(which(genotype[,i]==3)) > 0){
#     zeros <- length(which(genotype[,i] == 0 ))
#     ones <- length(which(genotype[,i] == 1 ))
#     twos <- length(which(genotype[,i] == 2 ))
#     maxone <- max(cbind(zeros, ones, twos))
#     imputewith <- which(cbind(zeros, ones, twos) == maxone)[1]-1
#     genotype[which(genotype[,i]==3),i] <- imputewith
#   }
# }
#read the files required
library(MASS)
library(plyr)
# Added required files to directory
genotype <- read.csv("genotype.csv")
phenotype <- read.csv("phenotype.csv")
names(phenotype) <- c("X","Phenotype")
#function to find minor allele frequency (MAF)
MAF <- function(x)
{
c2 = length(which(x == 2))
c1 = length(which(x == 1))
c0 = length(which(x == 0))
f0 = ((2*c0)+c1)/(2*nrow(x))
f2 = ((2*c2)+c1)/(2*nrow(x))
# m <- sum(y)/(2*nrow(x))
# n <- 1 - m
# s <- min(m,n)
s <- min(f0,f2)
s
}
#apply the function "MAF" to each SNP
p <- adply(genotype[-1],2,MAF)
length(which(p$V1>0.03))
length(which(p$V1>0.05))
length(which(p$V1>0.1))
p <- apply(genotype[-1],2,MAF)
warnings()
genotype <- read.csv("genotype.csv", row.names = 1)
MAF <- function(x)
{
c2 = length(which(x == 2))
c1 = length(which(x == 1))
c0 = length(which(x == 0))
f0 = ((2*c0)+c1)/(2*nrow(x))
f2 = ((2*c2)+c1)/(2*nrow(x))
# m <- sum(y)/(2*nrow(x))
# n <- 1 - m
# s <- min(m,n)
s <- min(f0,f2)
s
}
#apply the function "MAF" to each SNP
p <- apply(genotype[-1],2,MAF)
p <- apply(genotype,2,MAF)
warnings()
p
p <- adply(genotype,2,MAF)
p
View(p)
length(which(p$V1>0.03))
length(which(p$V1>0.05))
length(which(p$V1>0.1))
which(p$V1>0.05)
genotype.select<-genotype[,which(p$V1>0.05)]
glm(Y~1+x)
glm(Y~1+x, data = x)
glm(phenotype$Phenotype~1+x, data = x )
glm(phenotype$Phenotype~1+x, data = x, family = "binomial" )
glm(phenotype$Phenotype~1+x, data = data.frame(x), family = "binomial" )
glm(phenotype$Phenotype~1+x, data = data.frame(x), family = "binomial" )$coefficient
k<-glm(phenotype$Phenotype~1+x, data = data.frame(x), family = "binomial" )
summary(k)
summary(k)$coefficient
summary(k)$coefficient[2,4]
pvals<-vector(length = 10)
pvals<-vector(length = ncol(genotype.select))
pvals<-vector("numeric",length = ncol(genotype.select))
pvals<-vector("numeric",length = ncol(genotype.select))
for(i in nrow(genotype.select)){
x<-data.frame(genotype.select[,i])
temp1<-glm(phenotype$Phenotype~1+x, data = x, family = "binomial" )
pvals[i]<-summary(k)$coefficient[2,4]
}
x<-data.frame(genotype.select[,i])
temp1<-glm(phenotype$Phenotype~1+x, data = x, family = "binomial" )
for(i in nrow(genotype.select)){
x<-genotype.select[,i]
temp1<-glm(phenotype$Phenotype~1+x, data = data.frame(x), family = "binomial" )
pvals[i]<-summary(k)$coefficient[2,4]
}
pvals
pvals<-vector("numeric",length = ncol(genotype.select))
for(i in nrow(genotype.select)){
x<-genotype.select[,i]
temp1<-glm(phenotype$Phenotype~1+x, data = data.frame(x), family = "binomial" )
pvals[i]<-summary(temp1)$coefficient[2,4]
}
pvals
for(i in ncol(genotype.select)){
x<-genotype.select[,i]
temp1<-glm(phenotype$Phenotype~1+x, data = data.frame(x), family = "binomial" )
pvals[i]<-summary(temp1)$coefficient[2,4]
}
pvals
i
x<-genotype.select[,i]
temp1<-glm(phenotype$Phenotype~1+x, data = data.frame(x), family = "binomial" )
summary(temp1)$coefficient[2,4]
summary(temp1)$coefficient
i=50
x<-genotype.select[,i]
temp1<-glm(phenotype$Phenotype~1+x, data = data.frame(x), family = "binomial" )
pvals[i]<-summary(temp1)$coefficient[2,4]
for(i in 1:ncol(genotype.select)){
x<-genotype.select[,i]
temp1<-glm(phenotype$Phenotype~1+x, data = data.frame(x), family = "binomial" )
pvals[i]<-summary(temp1)$coefficient[2,4]
}
pvals
length(which(p$V1>0.05))
alpha = 0.05/7804
length(which(pvals < alpha))
length(which(pvals*7804 < 0.05))
adjpval<-pvals*length(pvals)
length(which(pvals < alpha))
length(which(pvals*7804 < 0.05))
adjbh<-p.adjust(pvals,method = "BH")
length(which(pvals < 0.05))
setwd("~/Documents/TA/homework1/piazza_post_hw_1/exercise7/")
# genotype<-read.csv("genotype.csv",row.names = 1)
#
# # impute with mode
# for(i in 1:ncol(genotype)){
#   if(length(which(genotype[,i]==3)) > 0){
#     zeros <- length(which(genotype[,i] == 0 ))
#     ones <- length(which(genotype[,i] == 1 ))
#     twos <- length(which(genotype[,i] == 2 ))
#     maxone <- max(cbind(zeros, ones, twos))
#     imputewith <- which(cbind(zeros, ones, twos) == maxone)[1]-1
#     genotype[which(genotype[,i]==3),i] <- imputewith
#   }
# }
#read the files required
library(MASS)
library(plyr)
# Added required files to directory
genotype <- read.csv("genotype.csv", row.names = 1)
phenotype <- read.csv("phenotype.csv")
names(phenotype) <- c("X","Phenotype")
#function to find minor allele frequency (MAF)
MAF <- function(x)
{
c2 = length(which(x == 2))
c1 = length(which(x == 1))
c0 = length(which(x == 0))
f0 = ((2*c0)+c1)/(2*nrow(x))
f2 = ((2*c2)+c1)/(2*nrow(x))
# m <- sum(y)/(2*nrow(x))
# n <- 1 - m
# s <- min(m,n)
s <- min(f0,f2)
s
}
#apply the function "MAF" to each SNP
p <- adply(genotype,2,MAF)
length(which(p$V1>0.03))
length(which(p$V1>0.05))
length(which(p$V1>0.1))
genotype.select<-genotype[,which(p$V1>0.05)]
pvals<-vector("numeric",length = ncol(genotype.select))
for(i in 1:ncol(genotype.select)){
x<-genotype.select[,i]
temp1<-glm(phenotype$Phenotype~1+x, data = data.frame(x), family = "binomial" )
pvals[i]<-summary(temp1)$coefficient[2,4]
}
alpha = 0.05/7804
adjpval<-pvals*length(pvals)
adjbh<-p.adjust(pvals,method = "BH")
length(which(p$V1>0.03))
length(which(p$V1>0.05))
length(which(p$V1>0.1))
paste("significant")
length(which(pvals < alpha))
length(which(pvals*7804 < 0.05))
which(pvals < alpha)
which(pvals*7804 < 0.05)
colnames(genotype.select)[which(pvals*7804 < 0.05)]
paste(length(which(p$V1>0.03)),length(which(p$V1>0.05)),length(which(p$V1>0.1)))
glm(phenotype$Phenotype~1+x, data = data.frame(genotype.select[,"rs623043"]), family = "binomial")
glm(phenotype$Phenotype~x, data = data.frame(genotype.select[,"rs623043"]), family = "binomial")
genotype.select[,
"rs623043"]
colnames(genotype)[9066]
paste(length(which(p$V1>0.03)),length(which(p$V1>0.05)),length(which(p$V1>0.1)))
MAF <- function(x)
{
c2 = length(which(x == 2))
c1 = length(which(x == 1))
c0 = length(which(x == 0))
f0 = ((2*c0)+c1)/(2*(c0+c1+c2))
f2 = ((2*c2)+c1)/(2*(c0+c1+c2))
# m <- sum(y)/(2*nrow(x))
# n <- 1 - m
# s <- min(m,n)
s <- min(f0,f2)
s
}
#apply the function "MAF" to each SNP
p <- adply(genotype,2,MAF)
length(which(p$V1>0.03))
length(which(p$V1>0.05))
length(which(p$V1>0.1))
genotype.select<-genotype[,which(p$V1>0.05)]
pvals<-vector("numeric",length = ncol(genotype.select))
for(i in 1:ncol(genotype.select)){
x<-genotype.select[,i]
temp1<-glm(phenotype$Phenotype~1+x, data = data.frame(x), family = "binomial" )
pvals[i]<-summary(temp1)$coefficient[2,4]
}
alpha = 0.05/7804
adjpval<-pvals*length(pvals)
adjbh<-p.adjust(pvals,method = "BH")
paste(length(which(p$V1>0.03)),length(which(p$V1>0.05)),length(which(p$V1>0.1)))
paste("significant")
length(which(pvals < alpha))
length(which(pvals*7804 < 0.05))
alpha = 0.05/7808
adjpval<-pvals*length(pvals)
adjbh<-p.adjust(pvals,method = "BH")
paste(length(which(p$V1>0.03)),length(which(p$V1>0.05)),length(which(p$V1>0.1)))
paste("significant")
length(which(pvals < alpha))
length(which(pvals*7804 < 0.05))
alpha = 0.05/279
adjpval<-pvals*length(pvals)
adjbh<-p.adjust(pvals,method = "BH")
paste(length(which(p$V1>0.03)),length(which(p$V1>0.05)),length(which(p$V1>0.1)))
paste("significant")
length(which(pvals < alpha))
length(which(pvals*7804 < 0.05))
summary(temp1)$coefficient[2,4]
summary(temp1)
setwd("~/Documents/TA/homework1/piazza_post_hw_1/exercise8/")
setwd("~/Documents/TA/homework1/piazza_post_hw_1/exercise8/")
train<-read.csv("train_expression.csv")
train<-read.csv("train_expression.csv",header =T)
trainp<-read.csv("train_phen.csv",header=T)
View(trainp)
paste(length(which(p$V1>0.03)),length(which(p$V1>0.05)),length(which(p$V1>0.1)))
