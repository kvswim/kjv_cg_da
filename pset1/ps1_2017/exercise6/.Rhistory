TOMplot(dissTOM^beta1 , geneTree, dynamicColors)
}
cmd1=cmdscale(as.dist(dissTOM),2)
par(mfrow=c(1,1))
plot(cmd1, col=as.character(dynamicColors),
main="MDS plot",xlab="Scaling Dimension 1",ylab="Scaling Dimension 2")
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Gene dendrogram and module colors")
# Calculate eigengenes
MEList = moduleEigengenes(dat.exp, colors = dynamicColors )
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-(t(cor(MEs, method="p")))/2;
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "complete");
# Plot the result
# sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
MEDissThres = 0.25
abline(h=MEDissThres, col = "red")
# sizeGrWindow(12, 9)
#pdf(file = "Plots/geneDendro-3.pdf", wi = 9, he = 6)
# plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
#                     c("Dynamic Tree Cut", "Merged dynamic"),
#                     dendroLabels = FALSE, hang = 0.03,
#                     addGuide = TRUE, guideHang = 0.05)
# Rename to moduleColors
moduleColors = dynamicColors
gene.module.membership = cbind(colnames(dat.exp),moduleColors)
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50))
plotEigengeneNetworks(orderMEs(MEs),"")
dev.off()
tiss.col = factor(annot[4,], levels=c("Breast", "Prostate", "colon", "liver", "esophagus", "retinalpigment"), labels=rainbow(6))
# study.col = factor(annot[3,], levels=unique(as.character(annot[3,])), labels=primary.colors(15))
epiemt = factor(annot[2,], levels=unique(as.character(annot[2,])), labels=c("purple","orange"))
pdf(paste(resultsDir,"heatmap.pdf", sep=''), height = 25, width = 100)
source("../../../heatmaps/heatmap.3.R")
for(i in unique(dynamicColors)){
heatmap.3(as.matrix(t(scale(2^dat.exp[,which(dynamicColors==i)]))), scale = "none",
# trace = "none",
col = blueWhiteRed(5000),
Rowv = F,
RowSideColors = t(as.matrix(dynamicColors[which(dynamicColors==i)])),
hclustfun = function(x) hclust(x, method = "complete"),
distfun = function(x) dist(x, method = "euclidean"),
ColSideColors = cbind("TISSUE"=as.character(tiss.col),
"CELLTYPE"=as.character(epiemt)),
dendrogram = "column",
cexRow=1,keysize=1,cexCol = 3,
margins=c(100,25)
)
}
dev.off()
dim(which(ADJ>0.07, arr.ind = T))
which(ADJ["C1orf116",]>0.07)
###########################################################################################
write.csv(gene.module.membership, file = paste(resultsDir, type, 'module_',minModuleSize,'.csv',sep=''), row.names = F)
# GOenr = GOenrichmentAnalysis(moduleColors, allLLIDs, organism = "human",
#                              nBestP = 20, ontologies = "BP", removeDuplicates = TRUE);
# tab = GOenr$bestPTerms$BP$enrichment
# write.table(tab, file = paste(resultsDir, type, '_', 'GOenrichment_',minModuleSize,'.csv',sep = ''), sep = ",", quote = TRUE, row.names = FALSE)
# cyt = exportNetworkToCytoscape(ADJ,
#                                edgeFile = paste("../results/CytoscapeInput-edges-", paste(modules, collapse="-"), ".txt", sep=""),
#                                nodeFile = paste("../results/CytoscapeInput-nodes-", paste(modules, collapse="-"), ".txt", sep=""),
#                                weighted = TRUE,
#                                threshold = 0.07,
#                                nodeNames = probes,
#                                nodeAttr = dynamicColors);
# WCGNA network construction for EMT data
# Princy parsana
# April 2016
library(colorRamps)
rm(list=ls())
# Load packages
library("org.Hs.eg.db",quietly = T)
library("WGCNA", quietly = T, warn.conflicts = F, verbose = F)
# Read data
setwd("~/projects/cancermetastasis/network_learning/WGCNA/data/")
resultsDir = "../results/"
dir.create(resultsDir)
source("util_functions.R")
if(grepl("allgenes",resultsDir)){
dat.input.file = "allgenes_data_bayesnet_order_regressPhen_mean.csv"
minModuleSize = 50
}else{
dat.input.file = "data_bayesnet_order_regressPhen_mean.csv"
minModuleSize = 10
}
# source("../../../heatmaps/heatmap.3.R")
dat.exp <- read.delim(dat.input.file,
header=T,row.names=1,sep = ',')
# Get annotation files
annot <- read.delim("../../../data/etc/epi-emt-annotation.csv",stringsAsFactors = F,
header = T,sep=",")
colnames(annot) <- annot[1,]
annot <- annot[,rownames(dat.exp)]
breast <- as.character(annot[1,which(annot[4,] %in% "Breast")])
prostate <- as.character(annot[1,which(annot[4,] %in% "Prostate")])
type = "signed"
## Gene filtering
pdf(file = paste(resultsDir,type,'_',"differential_wgcna_",
minModuleSize,".pdf",sep = ""))
# Mean expression
mean.genes <- apply(dat.exp,2,mean)
par(mfrow=c(1,2))
hist(mean.genes,100,main = "mean expression")
boxplot(mean.genes,col="lightblue",main = "mean expression")
# standard deviation of expression
sd.genes <- apply(dat.exp, 2, sd)
par(mfrow=c(1,2))
sd.order<-order(sd.genes, decreasing = TRUE)
hist(sd.genes,100,main = "standard deviation")
boxplot(sd.genes,col="lightblue",main = "standard deviation")
# select most variant genes
if(grepl("allgenes",resultsDir)){
dat.exp <- dat.exp[,sd.order[1:2000]]
}
## Test for outliers
sampleTree = hclust(dist(dat.exp), method = "complete")
par(mfrow=c(1,1))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2, cex = 0.5)
abline(h=0.2,col="red")
## Choose scale free topology
powers1=c(seq(1,10,by=1),seq(11,20,by=1))
RpowerTable=pickSoftThreshold(dat.exp,
networkType = "signed",
powerVector = powers1)[[2]]
gc()
cex1=0.5
#par(mfrow=c(1,1))
plot(RpowerTable[,1], -sign(RpowerTable[,3])*RpowerTable[,2],xlab="
Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",
type="l", ylim = c(0,1.0))
text(RpowerTable[,1], -sign(RpowerTable[,3])*RpowerTable[,2],
labels=powers1,cex=cex1,col="red")
# this line corresponds to using an R^2 cut-off of h
abline(h=0.7,col="red")
plot(RpowerTable[,1], RpowerTable[,5],xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n")
text(RpowerTable[,1], RpowerTable[,5], labels=powers1, cex=cex1,col="red")
#set power
if((grepl("allgenes",resultsDir))){
beta1 = 15
}else{
beta1 = 11.5
}
Connectivity=softConnectivity(dat.exp,power=beta1, type = "signed")
par(mfrow=c(1,1))
scaleFreePlot(Connectivity,
main=paste("soft threshold, power=",beta1), truncated=F)
ADJ= adjacency(dat.exp,power=beta1,
type = "signed")
gc()
dissTOM=TOMdist(ADJ)
geneTree = hclust(as.dist(dissTOM),method="average");
par(mfrow=c(1,1))
plot(geneTree,labels=F)
##cut tree and find modules
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 3, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
table(dynamicMods)
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
par(mfrow=c(2,1),mar=c(2,4,1,1))
plot(geneTree, main="Cluster Dendrogram", labels=F, xlab="", sub="");
plotColorUnderTree(geneTree,colors=data.frame(module=dynamicColors))
title("Module (branch) color")
if(!(grepl("allgenes",resultsDir))){
TOMplot(dissTOM^beta1 , geneTree, dynamicColors)
}
cmd1=cmdscale(as.dist(dissTOM),2)
par(mfrow=c(1,1))
plot(cmd1, col=as.character(dynamicColors),
main="MDS plot",xlab="Scaling Dimension 1",ylab="Scaling Dimension 2")
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Gene dendrogram and module colors")
# Calculate eigengenes
MEList = moduleEigengenes(dat.exp, colors = dynamicColors )
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-(t(cor(MEs, method="p")))/2;
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "complete");
# Plot the result
# sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
MEDissThres = 0.25
abline(h=MEDissThres, col = "red")
# sizeGrWindow(12, 9)
#pdf(file = "Plots/geneDendro-3.pdf", wi = 9, he = 6)
# plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
#                     c("Dynamic Tree Cut", "Merged dynamic"),
#                     dendroLabels = FALSE, hang = 0.03,
#                     addGuide = TRUE, guideHang = 0.05)
# Rename to moduleColors
moduleColors = dynamicColors
gene.module.membership = cbind(colnames(dat.exp),moduleColors)
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50))
plotEigengeneNetworks(orderMEs(MEs),"")
dev.off()
tiss.col = factor(annot[4,], levels=c("Breast", "Prostate", "colon", "liver", "esophagus", "retinalpigment"), labels=rainbow(6))
# study.col = factor(annot[3,], levels=unique(as.character(annot[3,])), labels=primary.colors(15))
epiemt = factor(annot[2,], levels=unique(as.character(annot[2,])), labels=c("purple","orange"))
pdf(paste(resultsDir,"heatmap.pdf", sep=''), height = 25, width = 100)
source("../../../heatmaps/heatmap.3.R")
for(i in unique(dynamicColors)){
heatmap.3(as.matrix(t(scale(2^dat.exp[,which(dynamicColors==i)]))), scale = "none",
# trace = "none",
col = blueWhiteRed(5000),
Rowv = F,
RowSideColors = t(as.matrix(dynamicColors[which(dynamicColors==i)])),
hclustfun = function(x) hclust(x, method = "complete"),
distfun = function(x) dist(x, method = "euclidean"),
ColSideColors = cbind("TISSUE"=as.character(tiss.col),
"CELLTYPE"=as.character(epiemt)),
dendrogram = "column",
cexRow=1,keysize=1,cexCol = 3,
margins=c(100,25)
)
}
dev.off()
dim(which(ADJ>0.07, arr.ind = T))
which(ADJ["C1orf116",]>0.07)
###########################################################################################
write.csv(gene.module.membership, file = paste(resultsDir, type, 'module_',minModuleSize,'.csv',sep=''), row.names = F)
# GOenr = GOenrichmentAnalysis(moduleColors, allLLIDs, organism = "human",
#                              nBestP = 20, ontologies = "BP", removeDuplicates = TRUE);
# tab = GOenr$bestPTerms$BP$enrichment
# write.table(tab, file = paste(resultsDir, type, '_', 'GOenrichment_',minModuleSize,'.csv',sep = ''), sep = ",", quote = TRUE, row.names = FALSE)
# cyt = exportNetworkToCytoscape(ADJ,
#                                edgeFile = paste("../results/CytoscapeInput-edges-", paste(modules, collapse="-"), ".txt", sep=""),
#                                nodeFile = paste("../results/CytoscapeInput-nodes-", paste(modules, collapse="-"), ".txt", sep=""),
#                                weighted = TRUE,
#                                threshold = 0.07,
#                                nodeNames = probes,
#                                nodeAttr = dynamicColors);
MEList
plotEigengeneNetworks(orderMEs(MEs),"")
# WCGNA network construction for EMT data
# Princy parsana
# April 2016
library(colorRamps)
rm(list=ls())
# Load packages
library("org.Hs.eg.db",quietly = T)
library("WGCNA", quietly = T, warn.conflicts = F, verbose = F)
# Read data
setwd("~/projects/cancermetastasis/network_learning/WGCNA/data/")
resultsDir = "../results/"
dir.create(resultsDir)
source("util_functions.R")
if(grepl("allgenes",resultsDir)){
dat.input.file = "allgenes_data_bayesnet_order_regressPhen_mean.csv"
minModuleSize = 50
}else{
dat.input.file = "data_bayesnet_order_regressPhen_mean.csv"
minModuleSize = 10
}
# source("../../../heatmaps/heatmap.3.R")
dat.exp <- read.delim(dat.input.file,
header=T,row.names=1,sep = ',')
# Get annotation files
annot <- read.delim("../../../data/etc/epi-emt-annotation.csv",stringsAsFactors = F,
header = T,sep=",")
colnames(annot) <- annot[1,]
annot <- annot[,rownames(dat.exp)]
breast <- as.character(annot[1,which(annot[4,] %in% "Breast")])
prostate <- as.character(annot[1,which(annot[4,] %in% "Prostate")])
type = "signed"
## Gene filtering
pdf(file = paste(resultsDir,type,'_',"differential_wgcna_",
minModuleSize,".pdf",sep = ""))
# Mean expression
mean.genes <- apply(dat.exp,2,mean)
par(mfrow=c(1,2))
hist(mean.genes,100,main = "mean expression")
boxplot(mean.genes,col="lightblue",main = "mean expression")
# standard deviation of expression
sd.genes <- apply(dat.exp, 2, sd)
par(mfrow=c(1,2))
sd.order<-order(sd.genes, decreasing = TRUE)
hist(sd.genes,100,main = "standard deviation")
boxplot(sd.genes,col="lightblue",main = "standard deviation")
# select most variant genes
if(grepl("allgenes",resultsDir)){
dat.exp <- dat.exp[,sd.order[1:2000]]
}
## Test for outliers
sampleTree = hclust(dist(dat.exp), method = "complete")
par(mfrow=c(1,1))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2, cex = 0.5)
abline(h=0.2,col="red")
## Choose scale free topology
powers1=c(seq(1,10,by=1),seq(11,20,by=1))
RpowerTable=pickSoftThreshold(dat.exp,
networkType = "signed",
powerVector = powers1)[[2]]
gc()
cex1=0.5
#par(mfrow=c(1,1))
plot(RpowerTable[,1], -sign(RpowerTable[,3])*RpowerTable[,2],xlab="
Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",
type="l", ylim = c(0,1.0))
text(RpowerTable[,1], -sign(RpowerTable[,3])*RpowerTable[,2],
labels=powers1,cex=cex1,col="red")
# this line corresponds to using an R^2 cut-off of h
abline(h=0.7,col="red")
plot(RpowerTable[,1], RpowerTable[,5],xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n")
text(RpowerTable[,1], RpowerTable[,5], labels=powers1, cex=cex1,col="red")
#set power
if((grepl("allgenes",resultsDir))){
beta1 = 15
}else{
beta1 = 11.5
}
Connectivity=softConnectivity(dat.exp,power=beta1, type = "signed")
par(mfrow=c(1,1))
scaleFreePlot(Connectivity,
main=paste("soft threshold, power=",beta1), truncated=F)
ADJ= adjacency(dat.exp,power=beta1,
type = "signed")
gc()
dissTOM=TOMdist(ADJ)
geneTree = hclust(as.dist(dissTOM),method="average");
par(mfrow=c(1,1))
plot(geneTree,labels=F)
##cut tree and find modules
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 3, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
table(dynamicMods)
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
par(mfrow=c(2,1),mar=c(2,4,1,1))
plot(geneTree, main="Cluster Dendrogram", labels=F, xlab="", sub="");
plotColorUnderTree(geneTree,colors=data.frame(module=dynamicColors))
title("Module (branch) color")
if(!(grepl("allgenes",resultsDir))){
TOMplot(dissTOM^beta1 , geneTree, dynamicColors)
}
cmd1=cmdscale(as.dist(dissTOM),2)
par(mfrow=c(1,1))
plot(cmd1, col=as.character(dynamicColors),
main="MDS plot",xlab="Scaling Dimension 1",ylab="Scaling Dimension 2")
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Gene dendrogram and module colors")
# Calculate eigengenes
MEList = moduleEigengenes(dat.exp, colors = dynamicColors )
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-(t(cor(MEs, method="p")))/2;
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "complete");
# Plot the result
# sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
MEDissThres = 0.25
abline(h=MEDissThres, col = "red")
# sizeGrWindow(12, 9)
#pdf(file = "Plots/geneDendro-3.pdf", wi = 9, he = 6)
# plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
#                     c("Dynamic Tree Cut", "Merged dynamic"),
#                     dendroLabels = FALSE, hang = 0.03,
#                     addGuide = TRUE, guideHang = 0.05)
# Rename to moduleColors
moduleColors = dynamicColors
gene.module.membership = cbind(colnames(dat.exp),moduleColors)
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50))
save(MEList)
plotEigengeneNetworks(orderMEs(MEs),"")
dev.off()
tiss.col = factor(annot[4,], levels=c("Breast", "Prostate", "colon", "liver", "esophagus", "retinalpigment"), labels=rainbow(6))
# study.col = factor(annot[3,], levels=unique(as.character(annot[3,])), labels=primary.colors(15))
epiemt = factor(annot[2,], levels=unique(as.character(annot[2,])), labels=c("purple","orange"))
pdf(paste(resultsDir,"heatmap.pdf", sep=''), height = 25, width = 100)
source("../../../heatmaps/heatmap.3.R")
for(i in unique(dynamicColors)){
heatmap.3(as.matrix(t(scale(2^dat.exp[,which(dynamicColors==i)]))), scale = "none",
# trace = "none",
col = blueWhiteRed(5000),
Rowv = F,
RowSideColors = t(as.matrix(dynamicColors[which(dynamicColors==i)])),
hclustfun = function(x) hclust(x, method = "complete"),
distfun = function(x) dist(x, method = "euclidean"),
ColSideColors = cbind("TISSUE"=as.character(tiss.col),
"CELLTYPE"=as.character(epiemt)),
dendrogram = "column",
cexRow=1,keysize=1,cexCol = 3,
margins=c(100,25)
)
}
dev.off()
dim(which(ADJ>0.07, arr.ind = T))
which(ADJ["C1orf116",]>0.07)
###########################################################################################
write.csv(gene.module.membership, file = paste(resultsDir, type, 'module_',minModuleSize,'.csv',sep=''), row.names = F)
# GOenr = GOenrichmentAnalysis(moduleColors, allLLIDs, organism = "human",
#                              nBestP = 20, ontologies = "BP", removeDuplicates = TRUE);
# tab = GOenr$bestPTerms$BP$enrichment
# write.table(tab, file = paste(resultsDir, type, '_', 'GOenrichment_',minModuleSize,'.csv',sep = ''), sep = ",", quote = TRUE, row.names = FALSE)
# cyt = exportNetworkToCytoscape(ADJ,
#                                edgeFile = paste("../results/CytoscapeInput-edges-", paste(modules, collapse="-"), ".txt", sep=""),
#                                nodeFile = paste("../results/CytoscapeInput-nodes-", paste(modules, collapse="-"), ".txt", sep=""),
#                                weighted = TRUE,
#                                threshold = 0.07,
#                                nodeNames = probes,
#                                nodeAttr = dynamicColors);
model.matrix(~as.character(an[4,]))
model.matrix(~as.character(annot[4,]))
k = model.matrix(~as.character(annot[4,]))
k
lm(MEs$MEturquoise~k)
lm(MEs$MEturquoise~k - 1)
lm(MEs$MEturquoise~k - 1)
summary(lm(MEs$MEturquoise~k - 1))[4,]
summary(lm(MEs$MEturquoise~k - 1))$coefficients[4,]
summary(lm(MEs$MEturquoise~k - 1))$coefficients
summary(lm(MEs$MEblack~k - 1))$coefficients
summary(lm(MEs$MEblue~k - 1))$coefficients
summary(lm(MEs$MEgreen~k - 1))$coefficients
summary(lm(MEs$MEbrown~k - 1))$coefficients
summary(lm(MEs$MEyellow~k - 1))$coefficients
k = model.matrix(~as.character(annot[2,]))
summary(lm(MEs$MEyellow~k - 1))$coefficients
summary(lm(MEs$MEturquoise~k - 1))$coefficients
summary(lm(MEs$MEturquoise~k - 1))$coefficients
summary(lm(MEs$MEturquoise~k - 1))$coefficien
summary(lm(MEs$MEturquoise~k - 1))$coe
summary(lm(MEs$MEturquoise~k - 1))
k = model.matrix(~as.character(annot[3,]))
summary(lm(MEs$MEturquoise~k - 1))
cor.test(dat.exp$C1orf116,MEs$MEblue)
dynamicColors[70]
rm(list = ls())
setwd("~/Documents/TA/homework1/piazza_post_hw_1/exercise7/")
# genotype<-read.csv("genotype.csv",row.names = 1)
#
# # impute with mode
# for(i in 1:ncol(genotype)){
#   if(length(which(genotype[,i]==3)) > 0){
#     zeros <- length(which(genotype[,i] == 0 ))
#     ones <- length(which(genotype[,i] == 1 ))
#     twos <- length(which(genotype[,i] == 2 ))
#     maxone <- max(cbind(zeros, ones, twos))
#     imputewith <- which(cbind(zeros, ones, twos) == maxone)[1]-1
#     genotype[which(genotype[,i]==3),i] <- imputewith
#   }
# }
#read the files required
library(MASS)
library(plyr)
# Added required files to directory
genotype <- read.csv("genotype.csv", row.names = 1)
phenotype <- read.csv("phenotype.csv")
names(phenotype) <- c("X","Phenotype")
#function to find minor allele frequency (MAF)
MAF <- function(x)
{
c2 = length(which(x == 2))
c1 = length(which(x == 1))
c0 = length(which(x == 0))
f0 = ((2*c0)+c1)/(2*(c0+c1+c2))
f2 = ((2*c2)+c1)/(2*(c0+c1+c2))
# m <- sum(y)/(2*nrow(x))
# n <- 1 - m
# s <- min(m,n)
s <- min(f0,f2)
s
}
#apply the function "MAF" to each SNP
p <- adply(genotype,2,MAF)
length(which(p$V1>0.03))
length(which(p$V1>0.05))
length(which(p$V1>0.1))
genotype.select<-genotype[,which(p$V1>0.05)]
pvals<-vector("numeric",length = ncol(genotype.select))
for(i in 1:ncol(genotype.select)){
x<-genotype.select[,i]
temp1<-glm(phenotype$Phenotype~1+x, data = data.frame(x), family = "binomial" )
pvals[i]<-summary(temp1)$coefficient[2,4]
}
alpha = 0.05/7808
adjpval<-pvals*length(pvals)
adjbh<-p.adjust(pvals,method = "BH")
paste(length(which(p$V1>0.03)),length(which(p$V1>0.05)),length(which(p$V1>0.1)))
View(genotype)
paste("significant")
length(which(pvals < alpha))
length(which(pvals*7804 < 0.05))
length(pvals)
colnames(genotype.select)[which(pvals < alpha)]
i
View(genotype.select)
i = rs623043
i = "rs623043"
x<-genotype.select[,i]
temp1<-glm(phenotype$Phenotype~1+x, data = data.frame(x), family = "binomial" )
summary(temp1)
